// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/guntoroyk/cake-store-api/entity"
)

// MockCakeUsecaseItf is a mock of CakeUsecaseItf interface.
type MockCakeUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockCakeUsecaseItfMockRecorder
}

// MockCakeUsecaseItfMockRecorder is the mock recorder for MockCakeUsecaseItf.
type MockCakeUsecaseItfMockRecorder struct {
	mock *MockCakeUsecaseItf
}

// NewMockCakeUsecaseItf creates a new mock instance.
func NewMockCakeUsecaseItf(ctrl *gomock.Controller) *MockCakeUsecaseItf {
	mock := &MockCakeUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockCakeUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeUsecaseItf) EXPECT() *MockCakeUsecaseItfMockRecorder {
	return m.recorder
}

// CreateCake mocks base method.
func (m *MockCakeUsecaseItf) CreateCake(cake *entity.Cake) (*entity.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCake", cake)
	ret0, _ := ret[0].(*entity.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCake indicates an expected call of CreateCake.
func (mr *MockCakeUsecaseItfMockRecorder) CreateCake(cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCake", reflect.TypeOf((*MockCakeUsecaseItf)(nil).CreateCake), cake)
}

// DeleteCake mocks base method.
func (m *MockCakeUsecaseItf) DeleteCake(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCake", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCake indicates an expected call of DeleteCake.
func (mr *MockCakeUsecaseItfMockRecorder) DeleteCake(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCake", reflect.TypeOf((*MockCakeUsecaseItf)(nil).DeleteCake), id)
}

// GetCake mocks base method.
func (m *MockCakeUsecaseItf) GetCake(id int) (*entity.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCake", id)
	ret0, _ := ret[0].(*entity.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCake indicates an expected call of GetCake.
func (mr *MockCakeUsecaseItfMockRecorder) GetCake(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCake", reflect.TypeOf((*MockCakeUsecaseItf)(nil).GetCake), id)
}

// GetCakes mocks base method.
func (m *MockCakeUsecaseItf) GetCakes() ([]*entity.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCakes")
	ret0, _ := ret[0].([]*entity.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCakes indicates an expected call of GetCakes.
func (mr *MockCakeUsecaseItfMockRecorder) GetCakes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCakes", reflect.TypeOf((*MockCakeUsecaseItf)(nil).GetCakes))
}

// UpdateCake mocks base method.
func (m *MockCakeUsecaseItf) UpdateCake(cake *entity.Cake) (*entity.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCake", cake)
	ret0, _ := ret[0].(*entity.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCake indicates an expected call of UpdateCake.
func (mr *MockCakeUsecaseItfMockRecorder) UpdateCake(cake interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCake", reflect.TypeOf((*MockCakeUsecaseItf)(nil).UpdateCake), cake)
}
